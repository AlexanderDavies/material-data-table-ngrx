{"version":3,"sources":["src/material/material-tree.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","tree","tslib","cdk","core","coercion","common","collections","rxjs","operators","this","core$1","MatTreeNode","_super","_elementRef","_tree","tabIndex","_this","call","role","Number","__extends","decorators","type","Directive","args","selector","exportAs","inputs","host","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","class","providers","provide","CdkTreeNode","useExisting","ctorParameters","ElementRef","CdkTree","String","Attribute","propDecorators","Input","mixinTabIndex","mixinDisabled","MatTreeNodeDef","apply","arguments","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","_disabled","Object","defineProperty","prototype","get","set","value","coerceBooleanProperty","enumerable","configurable","disabled","_tabIndex","ngAfterContentInit","ngOnDestroy","CdkNestedTreeNode","CDK_TREE_NODE_OUTLET_NODE","IterableDiffers","node","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTreeNodeOutlet","viewContainer","_node","CdkTreeNodeOutlet","ViewContainerRef","undefined","Inject","Optional","MatTree","Component","template","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","Default","styles","_nodeOutlet","ViewChild","static","MatTreeNodeToggle","recursive","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","MatTreeModule","NgModule","imports","CdkTreeModule","CommonModule","MatCommonModule","declarations","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","_treeControl","_treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","next","dataNodes","connect","collectionViewer","merge","__spread","viewChange","expansionModel","changed","map","disconnect","DataSource","MatTreeNestedDataSource"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/cdk/tree'), require('@angular/core'), require('@angular/material/core'), require('@angular/cdk/coercion'), require('@angular/common'), require('@angular/cdk/collections'), require('rxjs'), require('rxjs/operators')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/tree', ['exports', 'tslib', '@angular/cdk/tree', '@angular/core', '@angular/material/core', '@angular/cdk/coercion', '@angular/common', '@angular/cdk/collections', 'rxjs', 'rxjs/operators'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.tree = {}), global.tslib, global.ng.cdk.tree, global.ng.core, global.ng.material.core, global.ng.cdk.coercion, global.ng.common, global.ng.cdk.collections, global.rxjs, global.rxjs.operators));\n}(this, (function (exports, tslib, tree, core, core$1, coercion, common, collections, rxjs, operators) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _MatTreeNodeMixinBase = core$1.mixinTabIndex(core$1.mixinDisabled(tree.CdkTreeNode));\n    /**\n     * Wrapper for the CdkTree node with Material design styles.\n     */\n    var MatTreeNode = /** @class */ (function (_super) {\n        tslib.__extends(MatTreeNode, _super);\n        function MatTreeNode(_elementRef, _tree, tabIndex) {\n            var _this = _super.call(this, _elementRef, _tree) || this;\n            _this._elementRef = _elementRef;\n            _this._tree = _tree;\n            _this.role = 'treeitem';\n            _this.tabIndex = Number(tabIndex) || 0;\n            return _this;\n        }\n        MatTreeNode.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'mat-tree-node',\n                        exportAs: 'matTreeNode',\n                        inputs: ['disabled', 'tabIndex'],\n                        host: {\n                            '[attr.aria-expanded]': 'isExpanded',\n                            '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n                            '[attr.role]': 'role',\n                            'class': 'mat-tree-node'\n                        },\n                        providers: [{ provide: tree.CdkTreeNode, useExisting: MatTreeNode }]\n                    },] }\n        ];\n        /** @nocollapse */\n        MatTreeNode.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: tree.CdkTree },\n            { type: String, decorators: [{ type: core.Attribute, args: ['tabindex',] }] }\n        ]; };\n        MatTreeNode.propDecorators = {\n            role: [{ type: core.Input }]\n        };\n        return MatTreeNode;\n    }(_MatTreeNodeMixinBase));\n    /**\n     * Wrapper for the CdkTree node definition with Material design styles.\n     */\n    var MatTreeNodeDef = /** @class */ (function (_super) {\n        tslib.__extends(MatTreeNodeDef, _super);\n        function MatTreeNodeDef() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        MatTreeNodeDef.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[matTreeNodeDef]',\n                        inputs: [\n                            'when: matTreeNodeDefWhen'\n                        ],\n                        providers: [{ provide: tree.CdkTreeNodeDef, useExisting: MatTreeNodeDef }]\n                    },] }\n        ];\n        MatTreeNodeDef.propDecorators = {\n            data: [{ type: core.Input, args: ['matTreeNode',] }]\n        };\n        return MatTreeNodeDef;\n    }(tree.CdkTreeNodeDef));\n    /**\n     * Wrapper for the CdkTree nested node with Material design styles.\n     */\n    var MatNestedTreeNode = /** @class */ (function (_super) {\n        tslib.__extends(MatNestedTreeNode, _super);\n        function MatNestedTreeNode(_elementRef, _tree, _differs, tabIndex) {\n            var _this = _super.call(this, _elementRef, _tree, _differs) || this;\n            _this._elementRef = _elementRef;\n            _this._tree = _tree;\n            _this._differs = _differs;\n            _this._disabled = false;\n            _this.tabIndex = Number(tabIndex) || 0;\n            return _this;\n        }\n        Object.defineProperty(MatNestedTreeNode.prototype, \"disabled\", {\n            /** Whether the node is disabled. */\n            get: function () { return this._disabled; },\n            set: function (value) { this._disabled = coercion.coerceBooleanProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatNestedTreeNode.prototype, \"tabIndex\", {\n            /** Tabindex for the node. */\n            get: function () { return this.disabled ? -1 : this._tabIndex; },\n            set: function (value) {\n                // If the specified tabIndex value is null or undefined, fall back to the default value.\n                this._tabIndex = value != null ? value : 0;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        // This is a workaround for https://github.com/angular/angular/issues/23091\n        // In aot mode, the lifecycle hooks from parent class are not called.\n        // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n        MatNestedTreeNode.prototype.ngAfterContentInit = function () {\n            _super.prototype.ngAfterContentInit.call(this);\n        };\n        MatNestedTreeNode.prototype.ngOnDestroy = function () {\n            _super.prototype.ngOnDestroy.call(this);\n        };\n        MatNestedTreeNode.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'mat-nested-tree-node',\n                        exportAs: 'matNestedTreeNode',\n                        host: {\n                            '[attr.aria-expanded]': 'isExpanded',\n                            '[attr.role]': 'role',\n                            'class': 'mat-nested-tree-node',\n                        },\n                        providers: [\n                            { provide: tree.CdkNestedTreeNode, useExisting: MatNestedTreeNode },\n                            { provide: tree.CdkTreeNode, useExisting: MatNestedTreeNode },\n                            { provide: tree.CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode }\n                        ]\n                    },] }\n        ];\n        /** @nocollapse */\n        MatNestedTreeNode.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: tree.CdkTree },\n            { type: core.IterableDiffers },\n            { type: String, decorators: [{ type: core.Attribute, args: ['tabindex',] }] }\n        ]; };\n        MatNestedTreeNode.propDecorators = {\n            node: [{ type: core.Input, args: ['matNestedTreeNode',] }],\n            disabled: [{ type: core.Input }],\n            tabIndex: [{ type: core.Input }]\n        };\n        return MatNestedTreeNode;\n    }(tree.CdkNestedTreeNode));\n\n    /**\n     * Wrapper for the CdkTree padding with Material design styles.\n     */\n    var MatTreeNodePadding = /** @class */ (function (_super) {\n        tslib.__extends(MatTreeNodePadding, _super);\n        function MatTreeNodePadding() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        MatTreeNodePadding.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[matTreeNodePadding]',\n                        providers: [{ provide: tree.CdkTreeNodePadding, useExisting: MatTreeNodePadding }]\n                    },] }\n        ];\n        MatTreeNodePadding.propDecorators = {\n            level: [{ type: core.Input, args: ['matTreeNodePadding',] }],\n            indent: [{ type: core.Input, args: ['matTreeNodePaddingIndent',] }]\n        };\n        return MatTreeNodePadding;\n    }(tree.CdkTreeNodePadding));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n     * inside the outlet.\n     */\n    var MatTreeNodeOutlet = /** @class */ (function () {\n        function MatTreeNodeOutlet(viewContainer, _node) {\n            this.viewContainer = viewContainer;\n            this._node = _node;\n        }\n        MatTreeNodeOutlet.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[matTreeNodeOutlet]',\n                        providers: [{\n                                provide: tree.CdkTreeNodeOutlet,\n                                useExisting: MatTreeNodeOutlet\n                            }]\n                    },] }\n        ];\n        /** @nocollapse */\n        MatTreeNodeOutlet.ctorParameters = function () { return [\n            { type: core.ViewContainerRef },\n            { type: undefined, decorators: [{ type: core.Inject, args: [tree.CDK_TREE_NODE_OUTLET_NODE,] }, { type: core.Optional }] }\n        ]; };\n        return MatTreeNodeOutlet;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Wrapper for the CdkTable with Material design styles.\n     */\n    var MatTree = /** @class */ (function (_super) {\n        tslib.__extends(MatTree, _super);\n        function MatTree() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        MatTree.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'mat-tree',\n                        exportAs: 'matTree',\n                        template: \"<ng-container matTreeNodeOutlet></ng-container>\",\n                        host: {\n                            'class': 'mat-tree',\n                            'role': 'tree',\n                        },\n                        encapsulation: core.ViewEncapsulation.None,\n                        // See note on CdkTree for explanation on why this uses the default change detection strategy.\n                        // tslint:disable-next-line:validate-decorators\n                        changeDetection: core.ChangeDetectionStrategy.Default,\n                        providers: [{ provide: tree.CdkTree, useExisting: MatTree }],\n                        styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;min-height:48px;flex:1;overflow:hidden;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\\n\"]\n                    }] }\n        ];\n        MatTree.propDecorators = {\n            _nodeOutlet: [{ type: core.ViewChild, args: [MatTreeNodeOutlet, { static: true },] }]\n        };\n        return MatTree;\n    }(tree.CdkTree));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Wrapper for the CdkTree's toggle with Material design styles.\n     */\n    var MatTreeNodeToggle = /** @class */ (function (_super) {\n        tslib.__extends(MatTreeNodeToggle, _super);\n        function MatTreeNodeToggle() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.recursive = false;\n            return _this;\n        }\n        MatTreeNodeToggle.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[matTreeNodeToggle]',\n                        providers: [{ provide: tree.CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }]\n                    },] }\n        ];\n        MatTreeNodeToggle.propDecorators = {\n            recursive: [{ type: core.Input, args: ['matTreeNodeToggleRecursive',] }]\n        };\n        return MatTreeNodeToggle;\n    }(tree.CdkTreeNodeToggle));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var MAT_TREE_DIRECTIVES = [\n        MatNestedTreeNode,\n        MatTreeNodeDef,\n        MatTreeNodePadding,\n        MatTreeNodeToggle,\n        MatTree,\n        MatTreeNode,\n        MatTreeNodeOutlet\n    ];\n    var MatTreeModule = /** @class */ (function () {\n        function MatTreeModule() {\n        }\n        MatTreeModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [tree.CdkTreeModule, common.CommonModule, core$1.MatCommonModule],\n                        exports: MAT_TREE_DIRECTIVES,\n                        declarations: MAT_TREE_DIRECTIVES,\n                    },] }\n        ];\n        return MatTreeModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Tree flattener to convert a normal type of node to node with children & level information.\n     * Transform nested nodes of type `T` to flattened nodes of type `F`.\n     *\n     * For example, the input data of type `T` is nested, and contains its children data:\n     *   SomeNode: {\n     *     key: 'Fruits',\n     *     children: [\n     *       NodeOne: {\n     *         key: 'Apple',\n     *       },\n     *       NodeTwo: {\n     *        key: 'Pear',\n     *      }\n     *    ]\n     *  }\n     *  After flattener flatten the tree, the structure will become\n     *  SomeNode: {\n     *    key: 'Fruits',\n     *    expandable: true,\n     *    level: 1\n     *  },\n     *  NodeOne: {\n     *    key: 'Apple',\n     *    expandable: false,\n     *    level: 2\n     *  },\n     *  NodeTwo: {\n     *   key: 'Pear',\n     *   expandable: false,\n     *   level: 2\n     * }\n     * and the output flattened type is `F` with additional information.\n     */\n    var MatTreeFlattener = /** @class */ (function () {\n        function MatTreeFlattener(transformFunction, getLevel, isExpandable, getChildren) {\n            this.transformFunction = transformFunction;\n            this.getLevel = getLevel;\n            this.isExpandable = isExpandable;\n            this.getChildren = getChildren;\n        }\n        MatTreeFlattener.prototype._flattenNode = function (node, level, resultNodes, parentMap) {\n            var _this = this;\n            var flatNode = this.transformFunction(node, level);\n            resultNodes.push(flatNode);\n            if (this.isExpandable(flatNode)) {\n                var childrenNodes = this.getChildren(node);\n                if (childrenNodes) {\n                    if (Array.isArray(childrenNodes)) {\n                        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n                    }\n                    else {\n                        childrenNodes.pipe(operators.take(1)).subscribe(function (children) {\n                            _this._flattenChildren(children, level, resultNodes, parentMap);\n                        });\n                    }\n                }\n            }\n            return resultNodes;\n        };\n        MatTreeFlattener.prototype._flattenChildren = function (children, level, resultNodes, parentMap) {\n            var _this = this;\n            children.forEach(function (child, index) {\n                var childParentMap = parentMap.slice();\n                childParentMap.push(index != children.length - 1);\n                _this._flattenNode(child, level + 1, resultNodes, childParentMap);\n            });\n        };\n        /**\n         * Flatten a list of node type T to flattened version of node F.\n         * Please note that type T may be nested, and the length of `structuredData` may be different\n         * from that of returned list `F[]`.\n         */\n        MatTreeFlattener.prototype.flattenNodes = function (structuredData) {\n            var _this = this;\n            var resultNodes = [];\n            structuredData.forEach(function (node) { return _this._flattenNode(node, 0, resultNodes, []); });\n            return resultNodes;\n        };\n        /**\n         * Expand flattened node with current expansion status.\n         * The returned list may have different length.\n         */\n        MatTreeFlattener.prototype.expandFlattenedNodes = function (nodes, treeControl) {\n            var _this = this;\n            var results = [];\n            var currentExpand = [];\n            currentExpand[0] = true;\n            nodes.forEach(function (node) {\n                var expand = true;\n                for (var i = 0; i <= _this.getLevel(node); i++) {\n                    expand = expand && currentExpand[i];\n                }\n                if (expand) {\n                    results.push(node);\n                }\n                if (_this.isExpandable(node)) {\n                    currentExpand[_this.getLevel(node) + 1] = treeControl.isExpanded(node);\n                }\n            });\n            return results;\n        };\n        return MatTreeFlattener;\n    }());\n    /**\n     * Data source for flat tree.\n     * The data source need to handle expansion/collapsion of the tree node and change the data feed\n     * to `MatTree`.\n     * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n     * to type `F` for `MatTree` to consume.\n     */\n    var MatTreeFlatDataSource = /** @class */ (function (_super) {\n        tslib.__extends(MatTreeFlatDataSource, _super);\n        function MatTreeFlatDataSource(_treeControl, _treeFlattener, initialData) {\n            if (initialData === void 0) { initialData = []; }\n            var _this = _super.call(this) || this;\n            _this._treeControl = _treeControl;\n            _this._treeFlattener = _treeFlattener;\n            _this._flattenedData = new rxjs.BehaviorSubject([]);\n            _this._expandedData = new rxjs.BehaviorSubject([]);\n            _this._data = new rxjs.BehaviorSubject(initialData);\n            return _this;\n        }\n        Object.defineProperty(MatTreeFlatDataSource.prototype, \"data\", {\n            get: function () { return this._data.value; },\n            set: function (value) {\n                this._data.next(value);\n                this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n                this._treeControl.dataNodes = this._flattenedData.value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        MatTreeFlatDataSource.prototype.connect = function (collectionViewer) {\n            var _this = this;\n            var changes = [\n                collectionViewer.viewChange,\n                this._treeControl.expansionModel.changed,\n                this._flattenedData\n            ];\n            return rxjs.merge.apply(void 0, tslib.__spread(changes)).pipe(operators.map(function () {\n                _this._expandedData.next(_this._treeFlattener.expandFlattenedNodes(_this._flattenedData.value, _this._treeControl));\n                return _this._expandedData.value;\n            }));\n        };\n        MatTreeFlatDataSource.prototype.disconnect = function () {\n            // no op\n        };\n        return MatTreeFlatDataSource;\n    }(collections.DataSource));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Data source for nested tree.\n     *\n     * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n     * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n     */\n    var MatTreeNestedDataSource = /** @class */ (function (_super) {\n        tslib.__extends(MatTreeNestedDataSource, _super);\n        function MatTreeNestedDataSource() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this._data = new rxjs.BehaviorSubject([]);\n            return _this;\n        }\n        Object.defineProperty(MatTreeNestedDataSource.prototype, \"data\", {\n            /**\n             * Data for the nested tree\n             */\n            get: function () { return this._data.value; },\n            set: function (value) { this._data.next(value); },\n            enumerable: true,\n            configurable: true\n        });\n        MatTreeNestedDataSource.prototype.connect = function (collectionViewer) {\n            var _this = this;\n            return rxjs.merge.apply(void 0, tslib.__spread([collectionViewer.viewChange, this._data])).pipe(operators.map(function () {\n                return _this.data;\n            }));\n        };\n        MatTreeNestedDataSource.prototype.disconnect = function () {\n            // no op\n        };\n        return MatTreeNestedDataSource;\n    }(collections.DataSource));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.MatNestedTreeNode = MatNestedTreeNode;\n    exports.MatTree = MatTree;\n    exports.MatTreeFlatDataSource = MatTreeFlatDataSource;\n    exports.MatTreeFlattener = MatTreeFlattener;\n    exports.MatTreeModule = MatTreeModule;\n    exports.MatTreeNestedDataSource = MatTreeNestedDataSource;\n    exports.MatTreeNode = MatTreeNode;\n    exports.MatTreeNodeDef = MatTreeNodeDef;\n    exports.MatTreeNodeOutlet = MatTreeNodeOutlet;\n    exports.MatTreeNodePadding = MatTreeNodePadding;\n    exports.MatTreeNodeToggle = MatTreeNodeToggle;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=material-tree.umd.js.map\n"]}