{"version":3,"sources":["src/material/material-checkbox.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","checkbox","tslib","cdk","a11y","coercion","core","forms","platformBrowser","animations","observers","common","this","core$1","MAT_CHECKBOX_DEFAULT_OPTIONS","InjectionToken","providedIn","MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY","color","clickAction","TransitionCheckState","MAT_CHECKBOX_CLICK_ACTION","nextUniqueId","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","MatCheckbox","multi","MatCheckboxChange","_super","elementRef","_changeDetectorRef","_focusMonitor","_ngZone","tabIndex","_clickAction","_animationMode","_options","_this","call","ariaLabel","ariaLabelledby","_uniqueId","id","labelPosition","name","change","EventEmitter","indeterminateChange","_onTouched","_currentAnimationClass","_currentCheckState","Init","_controlValueAccessorChangeFn","_checked","_disabled","_indeterminate","parseInt","monitor","subscribe","focusOrigin","Promise","resolve","then","markForCheck","__extends","Object","defineProperty","prototype","get","enumerable","configurable","_required","set","value","coerceBooleanProperty","ngAfterViewInit","_syncIndeterminate","ngAfterViewChecked","ngOnDestroy","stopMonitoring","_elementRef","checked","newValue","disabled","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","emit","_isRippleDisabled","disableRipple","_onLabelTextChange","detectChanges","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","_getAriaChecked","indeterminate","newState","oldState","element","nativeElement","length","classList","remove","_getAnimationClassForCheckStateTransition","add","animationClass_1","runOutsideAngular","setTimeout","_emitChangeEvent","event","source","toggle","_onInputClick","stopPropagation","_inputElement","focus","origin","options","focusVia","_onInteractionEvent","animSuffix","nativeCheckbox","decorators","type","Component","args","selector","template","exportAs","host","class","[id]","[attr.tabindex]","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","[class._mat-animation-noopable]","providers","inputs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","styles","ctorParameters","ElementRef","ChangeDetectorRef","FocusMonitor","NgZone","String","Attribute","undefined","Optional","Inject","ANIMATION_MODULE_TYPE","propDecorators","Input","required","Output","ViewChild","ripple","MatRipple","mixinTabIndex","mixinColor","mixinDisableRipple","mixinDisabled","MatCheckboxBase","MAT_CHECKBOX_REQUIRED_VALIDATOR","NG_VALIDATORS","MatCheckboxRequiredValidator","apply","arguments","Directive","CheckboxRequiredValidator","_MatCheckboxRequiredValidatorModule","NgModule","declarations","MatCheckboxModule","imports","CommonModule","MatRippleModule","MatCommonModule","ObserversModule"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/cdk/a11y'), require('@angular/cdk/coercion'), require('@angular/core'), require('@angular/forms'), require('@angular/material/core'), require('@angular/platform-browser/animations'), require('@angular/cdk/observers'), require('@angular/common')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/checkbox', ['exports', 'tslib', '@angular/cdk/a11y', '@angular/cdk/coercion', '@angular/core', '@angular/forms', '@angular/material/core', '@angular/platform-browser/animations', '@angular/cdk/observers', '@angular/common'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.checkbox = {}), global.tslib, global.ng.cdk.a11y, global.ng.cdk.coercion, global.ng.core, global.ng.forms, global.ng.material.core, global.ng.platformBrowser.animations, global.ng.cdk.observers, global.ng.common));\n}(this, (function (exports, tslib, a11y, coercion, core, forms, core$1, animations, observers, common) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Injection token to be used to override the default options for `mat-checkbox`. */\n    var MAT_CHECKBOX_DEFAULT_OPTIONS = new core.InjectionToken('mat-checkbox-default-options', {\n        providedIn: 'root',\n        factory: MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY\n    });\n    /** @docs-private */\n    function MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY() {\n        return {\n            color: 'accent',\n            clickAction: 'check-indeterminate',\n        };\n    }\n    /**\n     * Injection token that can be used to specify the checkbox click behavior.\n     * @deprecated Injection token will be removed, use `MAT_CHECKBOX_DEFAULT_OPTIONS` instead.\n     * @breaking-change 10.0.0\n     */\n    var MAT_CHECKBOX_CLICK_ACTION = new core.InjectionToken('mat-checkbox-click-action');\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // Increasing integer for generating unique ids for checkbox components.\n    var nextUniqueId = 0;\n    /**\n     * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n     * This allows it to support [(ngModel)].\n     * @docs-private\n     */\n    var MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR = {\n        provide: forms.NG_VALUE_ACCESSOR,\n        useExisting: core.forwardRef(function () { return MatCheckbox; }),\n        multi: true\n    };\n    (function (TransitionCheckState) {\n        /** The initial state of the component before any user interaction. */\n        TransitionCheckState[TransitionCheckState[\"Init\"] = 0] = \"Init\";\n        /** The state representing the component when it's becoming checked. */\n        TransitionCheckState[TransitionCheckState[\"Checked\"] = 1] = \"Checked\";\n        /** The state representing the component when it's becoming unchecked. */\n        TransitionCheckState[TransitionCheckState[\"Unchecked\"] = 2] = \"Unchecked\";\n        /** The state representing the component when it's becoming indeterminate. */\n        TransitionCheckState[TransitionCheckState[\"Indeterminate\"] = 3] = \"Indeterminate\";\n    })(exports.TransitionCheckState || (exports.TransitionCheckState = {}));\n    /** Change event object emitted by MatCheckbox. */\n    var MatCheckboxChange = /** @class */ (function () {\n        function MatCheckboxChange() {\n        }\n        return MatCheckboxChange;\n    }());\n    // Boilerplate for applying mixins to MatCheckbox.\n    /** @docs-private */\n    var MatCheckboxBase = /** @class */ (function () {\n        function MatCheckboxBase(_elementRef) {\n            this._elementRef = _elementRef;\n        }\n        return MatCheckboxBase;\n    }());\n    var _MatCheckboxMixinBase = core$1.mixinTabIndex(core$1.mixinColor(core$1.mixinDisableRipple(core$1.mixinDisabled(MatCheckboxBase))));\n    /**\n     * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n     * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n     * disabled. Note that all additional accessibility attributes are taken care of by the component,\n     * so there is no need to provide them yourself. However, if you want to omit a label and still\n     * have the checkbox be accessible, you may supply an [aria-label] input.\n     * See: https://material.io/design/components/selection-controls.html\n     */\n    var MatCheckbox = /** @class */ (function (_super) {\n        tslib.__extends(MatCheckbox, _super);\n        function MatCheckbox(elementRef, _changeDetectorRef, _focusMonitor, _ngZone, tabIndex, \n        /**\n         * @deprecated `_clickAction` parameter to be removed, use\n         * `MAT_CHECKBOX_DEFAULT_OPTIONS`\n         * @breaking-change 10.0.0\n         */\n        _clickAction, _animationMode, _options) {\n            var _this = _super.call(this, elementRef) || this;\n            _this._changeDetectorRef = _changeDetectorRef;\n            _this._focusMonitor = _focusMonitor;\n            _this._ngZone = _ngZone;\n            _this._clickAction = _clickAction;\n            _this._animationMode = _animationMode;\n            _this._options = _options;\n            /**\n             * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n             * take precedence so this may be omitted.\n             */\n            _this.ariaLabel = '';\n            /**\n             * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n             */\n            _this.ariaLabelledby = null;\n            _this._uniqueId = \"mat-checkbox-\" + ++nextUniqueId;\n            /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n            _this.id = _this._uniqueId;\n            /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n            _this.labelPosition = 'after';\n            /** Name value will be applied to the input element if present */\n            _this.name = null;\n            /** Event emitted when the checkbox's `checked` value changes. */\n            _this.change = new core.EventEmitter();\n            /** Event emitted when the checkbox's `indeterminate` value changes. */\n            _this.indeterminateChange = new core.EventEmitter();\n            /**\n             * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n             * @docs-private\n             */\n            _this._onTouched = function () { };\n            _this._currentAnimationClass = '';\n            _this._currentCheckState = exports.TransitionCheckState.Init;\n            _this._controlValueAccessorChangeFn = function () { };\n            _this._checked = false;\n            _this._disabled = false;\n            _this._indeterminate = false;\n            _this._options = _this._options || {};\n            if (_this._options.color) {\n                _this.color = _this._options.color;\n            }\n            _this.tabIndex = parseInt(tabIndex) || 0;\n            _this._focusMonitor.monitor(elementRef, true).subscribe(function (focusOrigin) {\n                if (!focusOrigin) {\n                    // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                    // Angular does not expect events to be raised during change detection, so any state change\n                    // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n                    // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n                    // telling the form control it has been touched until the next tick.\n                    Promise.resolve().then(function () {\n                        _this._onTouched();\n                        _changeDetectorRef.markForCheck();\n                    });\n                }\n            });\n            // TODO: Remove this after the `_clickAction` parameter is removed as an injection parameter.\n            _this._clickAction = _this._clickAction || _this._options.clickAction;\n            return _this;\n        }\n        Object.defineProperty(MatCheckbox.prototype, \"inputId\", {\n            /** Returns the unique id for the visual hidden input. */\n            get: function () { return (this.id || this._uniqueId) + \"-input\"; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatCheckbox.prototype, \"required\", {\n            /** Whether the checkbox is required. */\n            get: function () { return this._required; },\n            set: function (value) { this._required = coercion.coerceBooleanProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        MatCheckbox.prototype.ngAfterViewInit = function () {\n            this._syncIndeterminate(this._indeterminate);\n        };\n        // TODO: Delete next major revision.\n        MatCheckbox.prototype.ngAfterViewChecked = function () { };\n        MatCheckbox.prototype.ngOnDestroy = function () {\n            this._focusMonitor.stopMonitoring(this._elementRef);\n        };\n        Object.defineProperty(MatCheckbox.prototype, \"checked\", {\n            /**\n             * Whether the checkbox is checked.\n             */\n            get: function () { return this._checked; },\n            set: function (value) {\n                if (value != this.checked) {\n                    this._checked = value;\n                    this._changeDetectorRef.markForCheck();\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatCheckbox.prototype, \"disabled\", {\n            /**\n             * Whether the checkbox is disabled. This fully overrides the implementation provided by\n             * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n             */\n            get: function () { return this._disabled; },\n            set: function (value) {\n                var newValue = coercion.coerceBooleanProperty(value);\n                if (newValue !== this.disabled) {\n                    this._disabled = newValue;\n                    this._changeDetectorRef.markForCheck();\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatCheckbox.prototype, \"indeterminate\", {\n            /**\n             * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n             * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n             * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n             * set to false.\n             */\n            get: function () { return this._indeterminate; },\n            set: function (value) {\n                var changed = value != this._indeterminate;\n                this._indeterminate = coercion.coerceBooleanProperty(value);\n                if (changed) {\n                    if (this._indeterminate) {\n                        this._transitionCheckState(exports.TransitionCheckState.Indeterminate);\n                    }\n                    else {\n                        this._transitionCheckState(this.checked ? exports.TransitionCheckState.Checked : exports.TransitionCheckState.Unchecked);\n                    }\n                    this.indeterminateChange.emit(this._indeterminate);\n                }\n                this._syncIndeterminate(this._indeterminate);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        MatCheckbox.prototype._isRippleDisabled = function () {\n            return this.disableRipple || this.disabled;\n        };\n        /** Method being called whenever the label text changes. */\n        MatCheckbox.prototype._onLabelTextChange = function () {\n            // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n            // component will be only marked for check, but no actual change detection runs automatically.\n            // Instead of going back into the zone in order to trigger a change detection which causes\n            // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n            // an explicit change detection for the checkbox view and its children.\n            this._changeDetectorRef.detectChanges();\n        };\n        // Implemented as part of ControlValueAccessor.\n        MatCheckbox.prototype.writeValue = function (value) {\n            this.checked = !!value;\n        };\n        // Implemented as part of ControlValueAccessor.\n        MatCheckbox.prototype.registerOnChange = function (fn) {\n            this._controlValueAccessorChangeFn = fn;\n        };\n        // Implemented as part of ControlValueAccessor.\n        MatCheckbox.prototype.registerOnTouched = function (fn) {\n            this._onTouched = fn;\n        };\n        // Implemented as part of ControlValueAccessor.\n        MatCheckbox.prototype.setDisabledState = function (isDisabled) {\n            this.disabled = isDisabled;\n        };\n        MatCheckbox.prototype._getAriaChecked = function () {\n            return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n        };\n        MatCheckbox.prototype._transitionCheckState = function (newState) {\n            var oldState = this._currentCheckState;\n            var element = this._elementRef.nativeElement;\n            if (oldState === newState) {\n                return;\n            }\n            if (this._currentAnimationClass.length > 0) {\n                element.classList.remove(this._currentAnimationClass);\n            }\n            this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(oldState, newState);\n            this._currentCheckState = newState;\n            if (this._currentAnimationClass.length > 0) {\n                element.classList.add(this._currentAnimationClass);\n                // Remove the animation class to avoid animation when the checkbox is moved between containers\n                var animationClass_1 = this._currentAnimationClass;\n                this._ngZone.runOutsideAngular(function () {\n                    setTimeout(function () {\n                        element.classList.remove(animationClass_1);\n                    }, 1000);\n                });\n            }\n        };\n        MatCheckbox.prototype._emitChangeEvent = function () {\n            var event = new MatCheckboxChange();\n            event.source = this;\n            event.checked = this.checked;\n            this._controlValueAccessorChangeFn(this.checked);\n            this.change.emit(event);\n        };\n        /** Toggles the `checked` state of the checkbox. */\n        MatCheckbox.prototype.toggle = function () {\n            this.checked = !this.checked;\n        };\n        /**\n         * Event handler for checkbox input element.\n         * Toggles checked state if element is not disabled.\n         * Do not toggle on (change) event since IE doesn't fire change event when\n         *   indeterminate checkbox is clicked.\n         * @param event\n         */\n        MatCheckbox.prototype._onInputClick = function (event) {\n            var _this = this;\n            // We have to stop propagation for click events on the visual hidden input element.\n            // By default, when a user clicks on a label element, a generated click event will be\n            // dispatched on the associated input element. Since we are using a label element as our\n            // root container, the click event on the `checkbox` will be executed twice.\n            // The real click event will bubble up, and the generated click event also tries to bubble up.\n            // This will lead to multiple click events.\n            // Preventing bubbling for the second event will solve that issue.\n            event.stopPropagation();\n            // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n            if (!this.disabled && this._clickAction !== 'noop') {\n                // When user manually click on the checkbox, `indeterminate` is set to false.\n                if (this.indeterminate && this._clickAction !== 'check') {\n                    Promise.resolve().then(function () {\n                        _this._indeterminate = false;\n                        _this.indeterminateChange.emit(_this._indeterminate);\n                    });\n                }\n                this.toggle();\n                this._transitionCheckState(this._checked ? exports.TransitionCheckState.Checked : exports.TransitionCheckState.Unchecked);\n                // Emit our custom change event if the native input emitted one.\n                // It is important to only emit it, if the native input triggered one, because\n                // we don't want to trigger a change event, when the `checked` variable changes for example.\n                this._emitChangeEvent();\n            }\n            else if (!this.disabled && this._clickAction === 'noop') {\n                // Reset native input when clicked with noop. The native checkbox becomes checked after\n                // click, reset it to be align with `checked` value of `mat-checkbox`.\n                this._inputElement.nativeElement.checked = this.checked;\n                this._inputElement.nativeElement.indeterminate = this.indeterminate;\n            }\n        };\n        /** Focuses the checkbox. */\n        MatCheckbox.prototype.focus = function (origin, options) {\n            if (origin === void 0) { origin = 'keyboard'; }\n            this._focusMonitor.focusVia(this._inputElement, origin, options);\n        };\n        MatCheckbox.prototype._onInteractionEvent = function (event) {\n            // We always have to stop propagation on the change event.\n            // Otherwise the change event, from the input element, will bubble up and\n            // emit its event object to the `change` output.\n            event.stopPropagation();\n        };\n        MatCheckbox.prototype._getAnimationClassForCheckStateTransition = function (oldState, newState) {\n            // Don't transition if animations are disabled.\n            if (this._animationMode === 'NoopAnimations') {\n                return '';\n            }\n            var animSuffix = '';\n            switch (oldState) {\n                case exports.TransitionCheckState.Init:\n                    // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n                    // [checked] bound to it.\n                    if (newState === exports.TransitionCheckState.Checked) {\n                        animSuffix = 'unchecked-checked';\n                    }\n                    else if (newState == exports.TransitionCheckState.Indeterminate) {\n                        animSuffix = 'unchecked-indeterminate';\n                    }\n                    else {\n                        return '';\n                    }\n                    break;\n                case exports.TransitionCheckState.Unchecked:\n                    animSuffix = newState === exports.TransitionCheckState.Checked ?\n                        'unchecked-checked' : 'unchecked-indeterminate';\n                    break;\n                case exports.TransitionCheckState.Checked:\n                    animSuffix = newState === exports.TransitionCheckState.Unchecked ?\n                        'checked-unchecked' : 'checked-indeterminate';\n                    break;\n                case exports.TransitionCheckState.Indeterminate:\n                    animSuffix = newState === exports.TransitionCheckState.Checked ?\n                        'indeterminate-checked' : 'indeterminate-unchecked';\n                    break;\n            }\n            return \"mat-checkbox-anim-\" + animSuffix;\n        };\n        /**\n         * Syncs the indeterminate value with the checkbox DOM node.\n         *\n         * We sync `indeterminate` directly on the DOM node, because in Ivy the check for whether a\n         * property is supported on an element boils down to `if (propName in element)`. Domino's\n         * HTMLInputElement doesn't have an `indeterminate` property so Ivy will warn during\n         * server-side rendering.\n         */\n        MatCheckbox.prototype._syncIndeterminate = function (value) {\n            var nativeCheckbox = this._inputElement;\n            if (nativeCheckbox) {\n                nativeCheckbox.nativeElement.indeterminate = value;\n            }\n        };\n        MatCheckbox.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'mat-checkbox',\n                        template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-checkbox-layout\\\" #label>\\n  <div class=\\\"mat-checkbox-inner-container\\\"\\n       [class.mat-checkbox-inner-container-no-side-margin]=\\\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\\\">\\n    <input #input\\n           class=\\\"mat-checkbox-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [checked]=\\\"checked\\\"\\n           [attr.value]=\\\"value\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [attr.aria-label]=\\\"ariaLabel || null\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-checked]=\\\"_getAriaChecked()\\\"\\n           (change)=\\\"_onInteractionEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n    <div matRipple class=\\\"mat-checkbox-ripple\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n      <div class=\\\"mat-ripple-element mat-checkbox-persistent-ripple\\\"></div>\\n    </div>\\n    <div class=\\\"mat-checkbox-frame\\\"></div>\\n    <div class=\\\"mat-checkbox-background\\\">\\n      <svg version=\\\"1.1\\\"\\n           focusable=\\\"false\\\"\\n           class=\\\"mat-checkbox-checkmark\\\"\\n           viewBox=\\\"0 0 24 24\\\"\\n           xml:space=\\\"preserve\\\">\\n        <path class=\\\"mat-checkbox-checkmark-path\\\"\\n              fill=\\\"none\\\"\\n              stroke=\\\"white\\\"\\n              d=\\\"M4.1,12.7 9,17.6 20.3,6.3\\\"/>\\n      </svg>\\n      <!-- Element for rendering the indeterminate state checkbox. -->\\n      <div class=\\\"mat-checkbox-mixedmark\\\"></div>\\n    </div>\\n  </div>\\n  <span class=\\\"mat-checkbox-label\\\" #checkboxLabel (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n                        exportAs: 'matCheckbox',\n                        host: {\n                            'class': 'mat-checkbox',\n                            '[id]': 'id',\n                            '[attr.tabindex]': 'null',\n                            '[class.mat-checkbox-indeterminate]': 'indeterminate',\n                            '[class.mat-checkbox-checked]': 'checked',\n                            '[class.mat-checkbox-disabled]': 'disabled',\n                            '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n                            '[class._mat-animation-noopable]': \"_animationMode === 'NoopAnimations'\",\n                        },\n                        providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n                        inputs: ['disableRipple', 'color', 'tabIndex'],\n                        encapsulation: core.ViewEncapsulation.None,\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.910259}50%{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0, 0, 0, 1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(0.4, 0, 1, 1);stroke-dashoffset:0}to{stroke-dashoffset:-22.910259}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0deg)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}32.8%,100%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox-layout{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-label{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}.mat-checkbox.cdk-keyboard-focused .cdk-high-contrast-active .mat-checkbox-frame{border-style:dotted}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0, 0, 0.2, 0.1),opacity 90ms cubic-bezier(0, 0, 0.2, 0.1)}._mat-animation-noopable .mat-checkbox-background{transition:none}.cdk-high-contrast-active .mat-checkbox .mat-checkbox-background{background:none}.mat-checkbox-persistent-ripple{width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-checkbox-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}@media(hover: none){.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{display:none}}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.910259;stroke-dasharray:22.910259;stroke-width:2.1333333333px}.cdk-high-contrast-black-on-white .mat-checkbox-checkmark-path{stroke:#000 !important}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0deg);border-radius:2px}.cdk-high-contrast-active .mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0deg)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.cdk-high-contrast-active .mat-checkbox-disabled{opacity:.5}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0ms mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0ms mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:300ms linear 0ms mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        MatCheckbox.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: core.ChangeDetectorRef },\n            { type: a11y.FocusMonitor },\n            { type: core.NgZone },\n            { type: String, decorators: [{ type: core.Attribute, args: ['tabindex',] }] },\n            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [MAT_CHECKBOX_CLICK_ACTION,] }] },\n            { type: String, decorators: [{ type: core.Optional }, { type: core.Inject, args: [animations.ANIMATION_MODULE_TYPE,] }] },\n            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [MAT_CHECKBOX_DEFAULT_OPTIONS,] }] }\n        ]; };\n        MatCheckbox.propDecorators = {\n            ariaLabel: [{ type: core.Input, args: ['aria-label',] }],\n            ariaLabelledby: [{ type: core.Input, args: ['aria-labelledby',] }],\n            id: [{ type: core.Input }],\n            required: [{ type: core.Input }],\n            labelPosition: [{ type: core.Input }],\n            name: [{ type: core.Input }],\n            change: [{ type: core.Output }],\n            indeterminateChange: [{ type: core.Output }],\n            value: [{ type: core.Input }],\n            _inputElement: [{ type: core.ViewChild, args: ['input',] }],\n            ripple: [{ type: core.ViewChild, args: [core$1.MatRipple,] }],\n            checked: [{ type: core.Input }],\n            disabled: [{ type: core.Input }],\n            indeterminate: [{ type: core.Input }]\n        };\n        return MatCheckbox;\n    }(_MatCheckboxMixinBase));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var MAT_CHECKBOX_REQUIRED_VALIDATOR = {\n        provide: forms.NG_VALIDATORS,\n        useExisting: core.forwardRef(function () { return MatCheckboxRequiredValidator; }),\n        multi: true\n    };\n    /**\n     * Validator for Material checkbox's required attribute in template-driven checkbox.\n     * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n     * work with `mat-checkbox`.\n     */\n    var MatCheckboxRequiredValidator = /** @class */ (function (_super) {\n        tslib.__extends(MatCheckboxRequiredValidator, _super);\n        function MatCheckboxRequiredValidator() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        MatCheckboxRequiredValidator.decorators = [\n            { type: core.Directive, args: [{\n                        selector: \"mat-checkbox[required][formControlName],\\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]\",\n                        providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n                    },] }\n        ];\n        return MatCheckboxRequiredValidator;\n    }(forms.CheckboxRequiredValidator));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** This module is used by both original and MDC-based checkbox implementations. */\n    var _MatCheckboxRequiredValidatorModule = /** @class */ (function () {\n        function _MatCheckboxRequiredValidatorModule() {\n        }\n        _MatCheckboxRequiredValidatorModule.decorators = [\n            { type: core.NgModule, args: [{\n                        exports: [MatCheckboxRequiredValidator],\n                        declarations: [MatCheckboxRequiredValidator],\n                    },] }\n        ];\n        return _MatCheckboxRequiredValidatorModule;\n    }());\n    var MatCheckboxModule = /** @class */ (function () {\n        function MatCheckboxModule() {\n        }\n        MatCheckboxModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [\n                            common.CommonModule, core$1.MatRippleModule, core$1.MatCommonModule, observers.ObserversModule,\n                            _MatCheckboxRequiredValidatorModule\n                        ],\n                        exports: [MatCheckbox, core$1.MatCommonModule, _MatCheckboxRequiredValidatorModule],\n                        declarations: [MatCheckbox],\n                    },] }\n        ];\n        return MatCheckboxModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.MAT_CHECKBOX_CLICK_ACTION = MAT_CHECKBOX_CLICK_ACTION;\n    exports.MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR = MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR;\n    exports.MAT_CHECKBOX_DEFAULT_OPTIONS = MAT_CHECKBOX_DEFAULT_OPTIONS;\n    exports.MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY = MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY;\n    exports.MAT_CHECKBOX_REQUIRED_VALIDATOR = MAT_CHECKBOX_REQUIRED_VALIDATOR;\n    exports.MatCheckbox = MatCheckbox;\n    exports.MatCheckboxChange = MatCheckboxChange;\n    exports.MatCheckboxModule = MatCheckboxModule;\n    exports.MatCheckboxRequiredValidator = MatCheckboxRequiredValidator;\n    exports._MatCheckboxRequiredValidatorModule = _MatCheckboxRequiredValidatorModule;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=material-checkbox.umd.js.map\n"]}